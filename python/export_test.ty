
test:: 'export() adds an item to the __exports__ dictionary'
    func:: double [a] [a * 2]
    export( double )
    assert_equal::
        dictionary_get(dictionary_get(__scope__ '__exports__') 'double')
        double

#
# read_code()
#

test:: 'read_code() returns  of values and function calls'
    define:: filename '/tmp/read_code_test.ty'
    define:: f file_open(filename 'wt')
    file_write(f "print('hello' 'code')")
    file_write(f "add(123 456)")
    file_close(f)
    define(expected Dictionary(['value' quote([print('hello' 'code') add(123 456)])]))
    define(actual Dictionary(['value' read_code(filename)]))

    assert_equal:: expected actual



#   Want:
#     import('mylibrary.ty') # `mylibrary` will be imported
#     import('mylibrary.ty' as: 'foo') # `foo`
#     import('mylibrary.ty' as: '*') # `myfunc` `otherfunc`
#     import('mylibrary.ty' 'myfunc' ) # only `myfunc`

test:: 'import() adds an item to the current scope'
    define(f file_open('/tmp/import_test.ty' 'wt'))
    file_write(f 'export:: func:: double [a] [a * 2]')
    file_write(f 'export:: func:: triple [a] [a * 3]')
    file_close(f)

    import('/tmp/import_test.ty')
    assert_equal:: double(4) 8
    assert_equal:: triple(3) 9

