define(PI 3.14159)
define(TAU 6.28318)

# Return `ast` without evaluating it
macro:: quote [ast] ast

#
# read_code()
#

# Reads file and returns structure of the code, e.g. lists of
# values and function calls
func:: read_code [filename]
    parse( file_read(filename) )

#
# export()
#
macro:: export [value_sym]
    __export__(caller_scope value_sym)

func:: __export__ [caller_scope value]
    # create empty '__export__' if it doesnt exist
    if::
        not(dictionary_in(caller_scope '__exports__'))
        mut_dictionary_set(caller_scope '__exports__' MutDictionary())

    define(value evaluate(__scope__ value_sym))
    mut_dictionary_set::
        dictionary_get(caller_scope '__exports__')
        getattr(value '__name__')
        value
#
#       import()
#
macro:: import [filename]
    __import__(caller_scope filename)

func:: __import__ [caller_scope filename]
    define(lines evaluate(__scope__ read_code(filename)))
    define:: exports dictionary_get(__scope__ '__exports__')
    dictionary_update:: caller_scope exports

#
#       Testing
#

macro:: test [description block]
    'Print a decription and the run the passed block'
    print('   ' description)
    evaluate(__scope__ block)

macro:: xtest [description block]
    print('  ' ANSI_YELLOW description ANSI_RESET)

func:: assert_equal [a b]
    if::
        not(equal(a b))
        print('       ' ANSI_RED 'FAIL - Expected' a 'to equal' b ANSI_RESET)
        print('       ' ANSI_GREEN 'OK -' a 'equals' b ANSI_RESET)
    pass

# print(':: Prelude.ty loaded ::')
